name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest ./backend

      - name: Push da imagem
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest

  sonar-analysis:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Copiar arquivos para o servidor remoto
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./*"
          target: "~/app"

      - name: Executar análise SonarQube no servidor remoto
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker run -d --name sonarqube -p 9000:9000 sonarqube
            sleep 60
            cd ~/app
            sonar-scanner \
              -Dsonar.projectKey=meu-projeto \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=admin \
              -Dsonar.password=admin
            docker stop sonarqube && docker rm sonarqube

  deploy:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Deploy remoto via SSH (sem docker-compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SONAR_HOST_URL }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker network create appnet || true

            docker stop db || true
            docker rm db || true
            docker run -d \
              --name db \
              --network appnet \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -e POSTGRES_DB=crud_db \
              -p 8237:5432 \
              -v ~/app/init.sql:/docker-entrypoint-initdb.d/init.sql \
              postgres:15

            docker stop crud-app || true
            docker rm crud-app || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest
            docker run -d \
              --name crud-app \
              --network appnet \
              -e PGUSER=postgres \
              -e PGPASSWORD=postgres \
              -e PGDATABASE=crud_db \
              -e PGPORT=5432 \
              -e PGHOST=db \
              -p 8236:3000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest
